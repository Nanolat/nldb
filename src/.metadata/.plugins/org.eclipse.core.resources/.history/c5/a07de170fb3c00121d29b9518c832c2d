#ifndef _NLDB_PLUGIN_LEVELDB_H_
#define _NLDB_PLUGIN_LEVELDB_H_ (1)

#include <nldb/nldb_plugin.h>

class nldb_plugin_leveldb_t : public nldb_plugin_t
{
public:
	virtual ~nldb_plugin_leveldb_t() {};

	virtual nldb_rc_t table_create(const nldb_table_id_t & db_id, const nldb_table_id_t & table_id, nldb_plugin_table_desc_t * table_desc);

	virtual nldb_rc_t table_drop(nldb_plugin_table_desc_t & table_desc);

	virtual nldb_rc_t table_open(nldb_plugin_table_desc_t & table_desc, nldb_table_context_t * table_ctx );

	virtual nldb_rc_t table_close(nldb_table_context_t & table_ctx );

	virtual nldb_rc_t table_put(nldb_table_context_t & table_ctx, const nldb_key_t & key, const nldb_value_t & value);

// errors : NLDB_ERROR_KEY_NOT_FOUND
	virtual nldb_rc_t table_get(nldb_table_context_t & table_ctx, const nldb_key_t & key, nldb_value_t * value);

// errors : NLDB_ERROR_KEY_NOT_FOUND
	virtual nldb_rc_t table_del(nldb_table_context_t & table_ctx, const nldb_key_t & key);

	// Free allocated memory for the value if any.
	virtual nldb_rc_t value_free(nldb_value_t & value);

	virtual nldb_rc_t cursor_open(nldb_table_context_t & table_ctx, nldb_cursor_context_t * cursor_ctx);

	virtual nldb_rc_t cursor_seek_forward (nldb_cursor_context_t & cursor_ctx, const nldb_key_t & key);

	virtual nldb_rc_t cursor_seek_backward(nldb_cursor_context_t & cursor_ctx, const nldb_key_t & key);

	virtual nldb_rc_t cursor_move_forward (nldb_cursor_context_t & cursor_ctx, nldb_key_t * key, nldb_value_t * value);

	virtual nldb_rc_t cursor_move_backward(nldb_cursor_context_t & cursor_ctx, nldb_key_t * key, nldb_value_t * value);

	virtual nldb_rc_t cursor_close(nldb_table_context_t & table_ctx, nldb_cursor_context_t cursor_ctx);
};

// The descriptor for the meta table that holds the list of tables 
extern nldb_plugin_table_desc_t nldb_meta_table_desc(const nldb_db_id_t & db_id);

#endif // _NLDB_PLUGIN_LEVELDB_H_
